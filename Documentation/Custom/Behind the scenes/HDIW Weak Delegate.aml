<?xml version="1.0" encoding="utf-8"?>
<topic id="625a19c1-550f-4c59-9203-7efb5b8676c2" revisionNumber="1">
  <developerConceptualDocument xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5" xmlns:xlink="http://www.w3.org/1999/xlink">
    <!--
    <summary>
      <para>Optional summary abstract</para>
    </summary>
    -->
    <introduction>
      <!-- Uncomment this to generate an outline of the section and sub-section
           titles.  Specify a numeric value as the inner text to limit it to
           a specific number of sub-topics when creating the outline.  Specify
           zero (0) to limit it to top-level sections only.  -->
      <!-- <autoOutline /> -->
      <para>Required introduction</para>
    </introduction>
    <section address="Section1">
      <title>Weak Delegate: how does it work?</title>
      <content>
        <para>
        Event handling is one of the good concepts of the .Net framework.
        It easy to use and enables to write great software that automatically reacts to changes
        </para>
        <para>
        But if you make more use of the events and trying to use them to set up models and wrap them with adapters models,
        you experience the dark side of event handlers that show their freaky face and give you what you fear the most
        in automatic-memory-managed-runtimes: Memory Leaks (huuuaaaaaahahaha)
        </para>
      </content>
      <sections>
          <section address="SubSection1">
              <title>The memory leak pit</title>
              <content>
                  <para>
                  Just in case you never asked yourself, where memory leaks are coming from when using event handler,
                  here's the catch: Event handler create a bidirectional linkage between the two objects, the event source
                  and the event sink. Whenever one of them is kept alive, the other one also stays alive
                  </para>
                  <para>
                  Now this is a very common case when layering models on top of each other; the 'base model' is normally
                  kept as something as a singleton, it is never deleted within the applictaion. So all the upper layer objects 
                  also stay alive, because they are linked from that singleton.
                  </para>
                  <para>
                  So how can this be avoided?
                  </para>
                  <para>
                  Conceptually, this is easy. If the object is destroyed, it must deregister itsself from the event source.
                  As easy as this sound, as hard this can be in reality; you cannot implement IDisposable on all of your objects,
                  and even if you do, sometimes there is no place you can really call the Dispose() method...
                  </para>
              </content>
          </section>
          <section address="SubSection2">
              <title>The solution: avoiding bidirectional linkage</title>
              <content>
                  <para>
                  Saying this, another solution comes into mind, this is, avoiding the double linkage.
                  </para>
                  <para>
                  The idea is simple: Why should I be called by an event handler, when I'm supposed to be dead and only
                  kept alive to receive events?
                  </para>
                  <para>
                  So we only have to change the 'call my while you're alive' methodology of 'normal' events into 'call me while I am alive'
                  of a weak event handler
                  </para>
                  <para>
                  Ok, so where's the problem? You'll see in the following sections.
                  </para>
              </content>
          </section>
          <section address="SubSection3">
              <title>The deisgn  goals</title>
              <content>
                  <para>
                  The goals are easy: we have to avoid, that the delegate used as event handler is an instance delegate.
                  Instead we have to change it into a static reference. The instance to call in the handler we have to
                  provide as a parameter. The instance link has to be referenced by a weak reference.
                  </para>
                  <para>
                  At the same time, we have to make sure, that this static handler we will be deregistered if the target is
                  collected by the Garbage Collector.
                  </para>
                  <para>
                  To make sure the goals are reached, I created three unit tests to make sure I reach the right functionality:<br/>
                  target_shall_be_collected_if_only_event_handler_is_a_reference<br/>
                  eventhandler_shall_be_called_if_event_is_fired<br/>
                  eventhandler_shall_be_unregistered_on_next_event_if_target_was_collected
                  </para>
              </content>
          </section>
      </sections>
    </section>
    <relatedTopics>
      <!-- One or more of the following:
           - A local link
           - An external link
           - A code entity reference

      <link xlink:href="Other Topic's ID"/>
      <link xlink:href="Other Topic's ID">Link inner text</link>

      <externalLink>
          <linkText>Link text</linkText>
          <linkAlternateText>Optional alternate link text</linkAlternateText>
          <linkUri>URI</linkUri>
      </externalLink>

      <codeEntityReference>API member ID</codeEntityReference>

      Examples:

      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8270" />
      <link xlink:href="00e97994-e9e6-46e0-b420-5be86b2f8278">Some other topic</link>

      <externalLink>
          <linkText>SHFB on CodePlex</linkText>
          <linkAlternateText>Go to CodePlex</linkAlternateText>
          <linkUri>http://shfb.codeplex.com</linkUri>
      </externalLink>

      <codeEntityReference>T:TestDoc.TestClass</codeEntityReference>
      <codeEntityReference>P:TestDoc.TestClass.SomeProperty</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.#ctor(System.String,System.Int32)</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.ToString</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.FirstMethod</codeEntityReference>
      <codeEntityReference>M:TestDoc.TestClass.SecondMethod(System.Int32,System.String)</codeEntityReference>
      -->
    </relatedTopics>
  </developerConceptualDocument>
</topic>