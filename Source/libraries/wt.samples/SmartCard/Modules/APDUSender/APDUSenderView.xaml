<wt:DialogWindow x:Class="WhileTrue.SmartCard.Modules.APDUSender.ApduSenderView"
           x:ClassModifier="internal"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:wt="http://schemas.whiletrue.eu/xaml"
             xmlns:apduSender="clr-namespace:WhileTrue.SmartCard.Modules.APDUSender"
             mc:Ignorable="d" EnableNonClientAreaDrawing="True"
             d:DesignHeight="150" d:DesignWidth="600"
        wt:PersistentProperty.Id="APDUSenderSample"
        Top="{wt:PersistentProperty Top,NaN}"
        Left="{wt:PersistentProperty Left,NaN}"
        Height="{wt:PersistentProperty Height,NaN}"
        Width="{wt:PersistentProperty Width,NaN}"
        WindowState="{wt:PersistentProperty WindowState,{x:Static WindowState.Normal}}" 
             Icon="APDUSender.ico"
             Title="APDU Sender"
             DialogTitle="APDU Sender - Smart card usage sample" 
                 Background="Transparent" >
    <wt:DialogWindow.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="/wt.core.win;component/Resources/Drawings.xaml"/>
            </ResourceDictionary.MergedDictionaries>
            <wt:CrossThreadCommandWrapper x:Key="CrossThreadCommandWrapper"/>
        </ResourceDictionary>
    </wt:DialogWindow.Resources>
    <wt:DialogWindow.Buttons>
        <Button Content="Close" IsCancel="True"/>
    </wt:DialogWindow.Buttons>
    <wt:ContentUnavailableControl ContentAvailable="{Binding IsAvailable}">
        <wt:ContentUnavailableControl.DefaultContent>
            <ContentControl Content="{Binding UnavailableState}" VerticalAlignment="Center" HorizontalAlignment="Center">
                <ContentControl.Style>
                    <Style TargetType="{x:Type ContentControl}">
                        <Style.Triggers>
                            <Trigger Property="Content" Value="{x:Static apduSender:UnavailableState.NoCardReaderSelected}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <wt:NotificationBanner HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <TextBlock TextAlignment="Center">You don't have a card reader selected, or the one you selected before was removed from the machine.<LineBreak/><Hyperlink Command="{Binding SelectReaderCommand,Converter={StaticResource CrossThreadCommandWrapper}}">Click here</Hyperlink> to select a card reader.</TextBlock>
                                            </wt:NotificationBanner>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                            <Trigger Property="Content" Value="{x:Static apduSender:UnavailableState.NoSmartCardInReader}">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate>
                                            <wt:NotificationBanner HorizontalAlignment="Center" VerticalAlignment="Center">
                                                <TextBlock TextAlignment="Center">There is no smart card inserted into the selected reader '<TextBlock Text="{Binding CardReader.Name}"/>'.<LineBreak/>Please insert a smart card to begin.</TextBlock>
                                            </wt:NotificationBanner>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </ContentControl.Style>
            </ContentControl>
        </wt:ContentUnavailableControl.DefaultContent>
        <DockPanel Margin="5">
            <DockPanel.Resources>
            <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
            </DockPanel.Resources>
            <StackPanel Orientation="Horizontal" DockPanel.Dock="Top">
                <TextBlock>Selected reader: '<TextBlock Text="{Binding CardReader.Name}"/>' / Card ATR: <TextBlock Text="{Binding SmartCardATR}"/> [ <Hyperlink Command="{Binding ConnectT0Command,Converter={StaticResource CrossThreadCommandWrapper}}">Connect (T=0)</Hyperlink> | <Hyperlink Command="{Binding ConnectT1Command,Converter={StaticResource CrossThreadCommandWrapper}}">Connect (T=1)</Hyperlink> | <Hyperlink Command="{Binding DisconnectCommand,Converter={StaticResource CrossThreadCommandWrapper}}">Disconnect</Hyperlink> ]</TextBlock>
            </StackPanel>
            <wt:DialogPanel DockPanel.Dock="Bottom" InnerColumnMargin="5" Visibility="{Binding HasLastCommand, Converter={StaticResource BooleanToVisibilityConverter}}">
                <TextBlock wt:DialogPanel.Caption="Last command sent:" Text="{Binding LastCommand}"/>
                <TextBlock wt:DialogPanel.Caption="Last response:" Text="{Binding LastResponse}"/>
            </wt:DialogPanel>

            <wt:ContentUnavailableControl ContentAvailable="{Binding IsSmartCardConnected}">
                <wt:ContentUnavailableControl.DefaultContent>
                    <wt:NotificationBanner HorizontalAlignment="Center" VerticalAlignment="Center">
                        <TextBlock>
                            Connect to the Smart Card with the connect links above.<LineBreak/> After that, you can type in APDUs to send.
                        </TextBlock>
                    </wt:NotificationBanner>
                </wt:ContentUnavailableControl.DefaultContent>
            <StackPanel HorizontalAlignment="Center" VerticalAlignment="Center" MinHeight="50">
                    <StackPanel Orientation="Horizontal">
                        <TextBox Text="{wt:ValidatingBinding Command, UpdateSourceTrigger=PropertyChanged}" Width="400" Name="CommandTextBox"/>
                        <Button Content="Send" Command="{Binding SendAPDUCommand,Converter={StaticResource CrossThreadCommandWrapper}}" Width="50" Name="SendButton"/>
                        <!--StackPanel.Triggers>
                            <DataTrigger Binding="{Binding IsSending}" Value="true">
                                <Setter TargetName="CommandTextBox" Property="TextBox.IsEnabled" Value="false"/>
                                <Setter TargetName="SendButton" Property="Button.IsEnabled" Value="false"/>
                                <Setter TargetName="SendButton" Property="Button.Content">
                                    <Setter.Value>
                                        <Image Source="{StaticResource ProgressAnimation}" Height="15" Width="15"/>
                                    </Setter.Value>
                                </Setter>
                            </DataTrigger>
                        </StackPanel.Triggers-->
                    </StackPanel>
                    <wt:ValidationResultBanner ValidationResults="{Binding (Validation.Errors), ElementName=CommandTextBox}"/>
            </StackPanel>
            </wt:ContentUnavailableControl>
        </DockPanel>
    </wt:ContentUnavailableControl>
</wt:DialogWindow>
